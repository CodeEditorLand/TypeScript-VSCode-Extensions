{
	"name": "playground",
	"displayName": "TypeScript Playground",
	"version": "0.0.0",
	"description": "-",
	"categories": [
		"Other"
	],
	"license": "MIT",
	"publisher": "typescript",
	"browser": "./dist/web/extension.js",
	"scripts": {
		"compile-web": "webpack",
		"lint": "eslint src --ext ts",
		"package-web": "webpack --mode production --devtool hidden-source-map",
		"run-in-browser": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. .",
		"pretest": "yarn run compile-web",
		"test": "vscode-test-web --browserType=chromium --extensionDevelopmentPath=. --extensionTestsPath=dist/web/test/suite/index.js",
		"vscode:prepublish": "yarn run package-web",
		"watch-web": "webpack --watch"
	},
	"contributes": {
		"commands": [
			{
				"command": "vscode-typescript-playground.startNewPlayground",
				"title": "Start new TypeScript Playground"
			},
			{
				"command": "vscode-typescript-playground.openVisualTSConfigEditor",
				"title": "Open TSConfig Visual Editor"
			},
			{
				"command": "vscode-typescript-playground.addPlaygroundToWorkspace",
				"title": "Add TypeScript Playground to Workspace"
			},
			{
				"command": "vscode-typescript-playground.openOnDesktop",
				"title": "Open on Web",
				"icon": "$(vm)"
			},
			{
				"command": "vscode-typescript-playground.openOnWeb",
				"title": "Open on Web",
				"icon": "$(globe)"
			}
		],
		"configuration": [
			{
				"title": "Essentials",
				"order": 0,
				"properties": {
					"target": {
						"type": "string",
						"default": "es2017",
						"enum": [
							"es3",
							"es5",
							"es2015",
							"es2016",
							"es2017",
							"es2018",
							"es2019",
							"es2020"
						],
						"markdownDescription": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations.."
					},
					"jsx": {
						"type": "string",
						"default": "react",
						"enum": [
							"none",
							"preserve",
							"react",
							"react-native",
							"reactjsx",
							"reactjsx-dev"
						],
						"markdownDescription": "Specify what JSX code is generated.."
					}
				}
			},
			{
				"title": "Output Formatting",
				"type": "object",
				"properties": {
					"preserveWatchOutput": {
						"type": "boolean",
						"markdownDescription": "Disable wiping the console in watch mode."
					},
					"pretty": {
						"type": "boolean",
						"markdownDescription": "Enable color and formatting in TypeScript's output to make compiler errors easier to read."
					},
					"noErrorTruncation": {
						"type": "boolean",
						"markdownDescription": "Disable truncating types in error messages."
					}
				}
			},
			{
				"title": "Emit",
				"type": "object",
				"properties": {
					"declaration": {
						"type": "boolean",
						"markdownDescription": "Generate .d.ts files from TypeScript and JavaScript files in your project."
					},
					"removeComments": {
						"type": "boolean",
						"markdownDescription": "Disable emitting comments."
					},
					"importHelpers": {
						"type": "boolean",
						"markdownDescription": "Allow importing helper functions from tslib once per project, instead of including them per-file."
					},
					"downlevelIteration": {
						"type": "boolean",
						"markdownDescription": "Emit more compliant, but verbose and less performant JavaScript for iteration."
					},
					"inlineSourceMap": {
						"type": "boolean",
						"markdownDescription": "Include sourcemap files inside the emitted JavaScript."
					},
					"inlineSources": {
						"type": "boolean",
						"markdownDescription": "Include source code in the sourcemaps inside the emitted JavaScript."
					},
					"stripInternal": {
						"type": "boolean",
						"markdownDescription": "Disable emitting declarations that have <code>@internal</code> in their JSDoc comments."
					},
					"noEmitHelpers": {
						"type": "boolean",
						"markdownDescription": "Disable generating custom helper functions like <code>__extends</code> in compiled output."
					},
					"preserveConstEnums": {
						"type": "boolean",
						"markdownDescription": "Disable erasing <code>const enum</code> declarations in generated code."
					},
					"preserveValueImports": {
						"type": "boolean",
						"markdownDescription": "Preserve unused imported values in the JavaScript output that would otherwise be removed."
					}
				}
			},
			{
				"title": "Interop Constraints",
				"type": "object",
				"properties": {
					"isolatedModules": {
						"type": "boolean",
						"markdownDescription": "Ensure that each file can be safely transpiled without relying on other imports."
					},
					"allowSyntheticDefaultImports": {
						"type": "boolean",
						"markdownDescription": "Allow 'import x from y' when a module doesn't have a default export."
					},
					"esModuleInterop": {
						"type": "boolean",
						"markdownDescription": "Emit additional JavaScript to ease support for importing CommonJS modules. This enables <a href=\"#allowSyntheticDefaultImports\"><code>allowSyntheticDefaultImports</code></a> for type compatibility."
					}
				}
			},
			{
				"title": "Type Checking",
				"type": "object",
				"properties": {
					"strict": {
						"type": "boolean",
						"markdownDescription": "Enable all strict type-checking options."
					},
					"noImplicitAny": {
						"type": "boolean",
						"markdownDescription": "Enable error reporting for expressions and declarations with an implied <code>any</code> type.."
					},
					"strictNullChecks": {
						"type": "boolean",
						"markdownDescription": "When type checking, take into account <code>null</code> and <code>undefined</code>."
					},
					"strictFunctionTypes": {
						"type": "boolean",
						"markdownDescription": "When assigning functions, check to ensure parameters and the return values are subtype-compatible."
					},
					"strictBindCallApply": {
						"type": "boolean",
						"markdownDescription": "Check that the arguments for <code>bind</code>, <code>call</code>, and <code>apply</code> methods match the original function."
					},
					"strictPropertyInitialization": {
						"type": "boolean",
						"markdownDescription": "Check for class properties that are declared but not set in the constructor."
					},
					"noImplicitThis": {
						"type": "boolean",
						"markdownDescription": "Enable error reporting when <code>this</code> is given the type <code>any</code>."
					},
					"useUnknownInCatchVariables": {
						"type": "boolean",
						"markdownDescription": "Default catch clause variables as <code>unknown</code> instead of <code>any</code>."
					},
					"alwaysStrict": {
						"type": "boolean",
						"markdownDescription": "Ensure 'use strict' is always emitted."
					},
					"noUnusedLocals": {
						"type": "boolean",
						"markdownDescription": "Enable error reporting when a local variables aren't read."
					},
					"noUnusedParameters": {
						"type": "boolean",
						"markdownDescription": "Raise an error when a function parameter isn't read."
					},
					"exactOptionalPropertyTypes": {
						"type": "boolean",
						"markdownDescription": "Differentiate between undefined and not present when type checking."
					},
					"noImplicitReturns": {
						"type": "boolean",
						"markdownDescription": "Enable error reporting for codepaths that do not explicitly return in a function."
					},
					"noFallthroughCasesInSwitch": {
						"type": "boolean",
						"markdownDescription": "Enable error reporting for fallthrough cases in switch statements."
					},
					"noUncheckedIndexedAccess": {
						"type": "boolean",
						"markdownDescription": "Add <code>undefined</code> to a type when accessed using an index."
					},
					"noImplicitOverride": {
						"type": "boolean",
						"markdownDescription": "Ensure overriding members in derived classes are marked with an override modifier."
					},
					"noPropertyAccessFromIndexSignature": {
						"type": "boolean",
						"markdownDescription": "Enforces using indexed accessors for keys declared using an indexed type."
					},
					"allowUnusedLabels": {
						"type": "boolean",
						"markdownDescription": "Disable error reporting for unused labels."
					},
					"allowUnreachableCode": {
						"type": "boolean",
						"markdownDescription": "Disable error reporting for unreachable code."
					}
				}
			},
			{
				"title": "Modules",
				"type": "object",
				"properties": {
					"allowUmdGlobalAccess": {
						"type": "boolean",
						"markdownDescription": "Allow accessing UMD globals from modules."
					}
				}
			},
			{
				"title": "Language and Environment",
				"type": "object",
				"properties": {
					"experimentalDecorators": {
						"type": "boolean",
						"markdownDescription": "Enable experimental support for TC39 stage 2 draft decorators."
					},
					"emitDecoratorMetadata": {
						"type": "boolean",
						"markdownDescription": "Emit design-type metadata for decorated declarations in source files."
					},
					"noLib": {
						"type": "boolean",
						"markdownDescription": "Disable including any library files, including the default lib.d.ts."
					},
					"useDefineForClassFields": {
						"type": "boolean",
						"markdownDescription": "Emit ECMAScript-standard-compliant class fields."
					}
				}
			},
			{
				"title": "Projects",
				"type": "object",
				"properties": {
					"disableSourceOfProjectReferenceRedirect": {
						"type": "boolean",
						"markdownDescription": "Disable preferring source files instead of declaration files when referencing composite projects."
					}
				}
			},
			{
				"title": "Backwards Compatibility",
				"type": "object",
				"properties": {
					"noImplicitUseStrict": {
						"type": "boolean",
						"markdownDescription": "Disable adding 'use strict' directives in emitted JavaScript files."
					},
					"suppressExcessPropertyErrors": {
						"type": "boolean",
						"markdownDescription": "Disable reporting of excess property errors during the creation of object literals."
					},
					"suppressImplicitAnyIndexErrors": {
						"type": "boolean",
						"markdownDescription": "Suppress <a href=\"#noImplicitAny\"><code>noImplicitAny</code></a> errors when indexing objects that lack index signatures."
					},
					"noStrictGenericChecks": {
						"type": "boolean",
						"markdownDescription": "Disable strict checking of generic signatures in function types."
					},
					"keyofStringsOnly": {
						"type": "boolean",
						"markdownDescription": "Make keyof only return strings instead of string, numbers or symbols. Legacy option."
					}
				}
			}
		],
		"menus": {
			"statusBar/remoteIndicator": [
				{
					"command": "vscode-typescript-playground.startNewPlayground",
					"group": "virtualfs_44_vscode-vfs_0_local@1"
				}
			]
		},
		"resourceLabelFormatters": [
			{
				"scheme": "playfs",
				"authority": "playfs",
				"formatting": {
					"label": "${path}",
					"separator": "/",
					"workspaceSuffix": "TypeScript Playground",
					"stripPathStartingSeparator": true
				}
			}
		],
		"views": {
			"remote": [
				{
					"id": "vscode-typescript-playground.playground",
					"name": "TypeScript Playground",
					"group": "targets@1",
					"remoteName": "playfs"
				}
			],
			"ts-playground": [
				{
					"type": "webview",
					"id": "vscode-typescript-playground.sidebarView",
					"name": ""
				}
			]
		},
		"viewsContainers": {
			"activitybar": [
				{
					"id": "ts-playground",
					"title": "TypeScript Playground",
					"icon": "resources/ts-logo.svg"
				}
			]
		},
		"virtualWorkspaces": {
			"menus": {
				"continueOn": [
					{
						"command": "remoteHub.openOnDesktop",
						"group": "navigation@0",
						"when": "false && isWeb && remoteHub:hasVirtualFolders"
					},
					{
						"command": "remoteHub.openOnWeb",
						"group": "navigation@0",
						"when": "false && !isWeb && remoteHub:hasVirtualFolders"
					}
				]
			}
		}
	},
	"activationEvents": [
		"onCommand:vscode-typescript-playground.startNewPlayground",
		"onView:vscode-typescript-playground.playground",
		"onFileSystem:playfs",
		"onUri",
		"*"
	],
	"prettier": {
		"printWidth": 140,
		"semi": false
	},
	"dependencies": {
		"@typescript/ata": "0.9.4",
		"@vscode/webview-ui-toolkit": "1.2.2",
		"fetch-progress": "1.3.0",
		"find-replace-webpack-plugin": "1.0.0",
		"path-browserify": "1.0.1",
		"sucrase": "3.34.0",
		"ts-debounce": "4.0.0",
		"vsce": "2.5.1",
		"webworker-promise": "0.5.1"
	},
	"devDependencies": {
		"@types/mocha": "10.0.4",
		"@types/vscode": "1.84.1",
		"@types/webpack-env": "1.18.4",
		"@typescript-eslint/eslint-plugin": "6.10.0",
		"@typescript-eslint/parser": "6.10.0",
		"@vscode/test-web": "0.0.48",
		"assert": "2.1.0",
		"eslint": "8.53.0",
		"mocha": "10.2.0",
		"prettier": "3.0.3",
		"process": "0.11.10",
		"ts-loader": "9.5.0",
		"typescript": "5.2.2",
		"webpack": "5.89.0",
		"webpack-cli": "5.1.4"
	},
	"engines": {
		"vscode": "1.63.0"
	},
	"preview": true,
	"capabilities": {
		"virtualWorkspaces": true,
		"untrustedWorkspaces": {
			"supported": true
		}
	},
	"extensionKind": [
		"ui"
	],
	"_enabledApiProposals": [
		"contribViewsRemote"
	]
}
